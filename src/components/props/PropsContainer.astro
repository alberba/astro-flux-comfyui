---
import LockAspectRatio from "./public/svg/lockaspectratio.svg";
import InputNumber from "./InputNumber.astro";
---

<div class="bg-white p-4 rounded-lg shadow-md">
  <div class="flex flex-row justify-between">
    <h2 class="text-xl font-semibold mb-2">Generation Settings</h2>
    <div class="flex items-center">
      <span class="mr-2 text-sm font-medium text-gray-700">Basic</span>
      <label class="relative inline-flex items-center cursor-pointer">
        <input type="checkbox" id="toggle-advanced" class="sr-only peer" />
        <div
          class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-indigo-500 rounded-full peer peer-checked:bg-indigo-600 transition-all"
        >
        </div>
        <div
          class="absolute left-1 top-1 bg-white w-4 h-4 rounded-full shadow peer-checked:translate-x-5 transition-transform"
        >
        </div>
      </label>
      <span class="ml-2 text-sm font-medium text-gray-700">Advanced</span>
    </div>
  </div>

  <div id="settings-basic-advanced" class="space-y-2">
    <div>
      <label class="block text-sm font-medium text-gray-700">Prompt</label>
      <textarea
        id="prompt"
        rows="1"
        class="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
        placeholder="Introduce el prompt"></textarea>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Resolution</label>
      <div class="flex gap-2 items-center">
        <InputNumber
          id="width"
          placeholder="Width"
          title="Width"
          value="1024"
        />
        <InputNumber
          id="height"
          placeholder="Height"
          title="Height"
          value="1024"
        />
        <button
          id="toggle-aspect-ratio"
          class="mt-1 px-3 py-3 h-full bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200"
          title="Fix aspect ratio"
        >
          <LockAspectRatio class="h-5 w-5" />
        </button>
      </div>
    </div>
    <div>
      <label class="block text-sm font-medium text-gray-700">Loras</label>
      <select
        id="loras-select"
        class="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
      >
        <option value="">--Select a Lora--</option>
      </select>
    </div>
    <div id="advanced-fields" style="display:none;">
      <div>
        <div class="flex space-x-2">
          <div class="flex flex-col w-full">
            <InputNumber
              id="seed"
              placeholder="-1 para aleatorio"
              title="Seed"
              value=""
            >
              <button
                id="last-seed"
                class="mt-1 px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                <img
                  src="/lorasuib/svg/undo.svg"
                  alt="Last Seed"
                  class="h-5 w-5"
                />
              </button>
              <button
                id="random-seed"
                class="mt-1 px-3 py-2 bg-gray-100 text-gray-700 rounded-md hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-indigo-500"
              >
                <img
                  src="/lorasuib/svg/random.svg"
                  alt="Random Seed"
                  class="h-5 w-5"
                />
              </button>
            </InputNumber>
          </div>
        </div>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">CFG</label>
        <div class="flex items-center space-x-2">
          <input
            type="range"
            id="cfg-range"
            min="0.1"
            max="10"
            value="1"
            step="0.01"
            class="flex-grow"
          />
          <input
            type="number"
            id="cfg-number"
            min="0.1"
            max="10"
            value="1"
            step="0.01"
            class="w-14 text-right rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-1 text-sm"
          />
        </div>
      </div>
      <div>
        <label class="block text-sm font-medium text-gray-700">Steps</label>
        <div class="flex items-center space-x-2">
          <input
            type="range"
            id="steps-range"
            min="1"
            max="50"
            value="25"
            class="flex-grow"
          />
          <input
            type="number"
            id="steps-number"
            min="1"
            max="50"
            value="25"
            class="w-14 text-right rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-1 text-sm"
          />
        </div>
      </div>
    </div>
    <div class="flex space-x-2">
      <button
        id="generate"
        class="flex-grow bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700"
      >
        Generate Image
      </button>
      <div class="flex items-center space-x-2">
        <input
          type="number"
          id="ex-size"
          min="1"
          max="10"
          value="1"
          class="w-16 rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2 text-sm"
          title="Number of sequential generations"
        />
      </div>
    </div>
  </div>
</div>

<script>
  import {
    fetchUrlResponse,
    getApiUrl,
    LORA_DISPLAY_NAMES,
    LORA_TO_EXCLUDE,
  } from "../../lib/utils.ts";

  const setLoraSelect = (lorasArray: string[]) => {
    const loraSelect = document.getElementById(
      "loras-select"
    ) as HTMLSelectElement;

    lorasArray
      .filter((l) => l !== LORA_TO_EXCLUDE)
      .forEach((lora: string) => {
        const option = document.createElement("option");
        option.value = lora;
        option.textContent = LORA_DISPLAY_NAMES[lora] ?? lora; // Use custom name if available, otherwise use original
        loraSelect.appendChild(option);
      });
  };

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      const response = await fetchUrlResponse(getApiUrl() + "/get-loras");
      setLoraSelect(await response.json());
    } catch (error) {
      console.error("Error fetching Loras:", error);
    }
  });
</script>
