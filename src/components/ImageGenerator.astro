---
import PropsContainer from "./props/PropsContainer.astro";

const props = Astro.props;
interface Props {
  showLoraSelect?: boolean;
  apiEndpointWorkflow: string;
}
---

<div class="max-w-3xl mx-auto">
  <!-- Generated Image Display -->
  <div class="bg-white p-4 rounded-lg shadow-md mb-4" id="test">
    <slot name="image-container">
      <div
        id="generatedImage"
        class="w-full aspect-[3/2] border rounded bg-gray-50 flex items-center justify-center relative group">
        <p class="text-gray-500">Generated image will appear here</p>
        <img
          id="imageOutput"
          src=""
          alt="Generated Image"
          class="hidden w-full h-full object-contain absolute top-0 left-0"
        />
        <!-- Image History Slider -->
      </div>
      <div
        id="imageHistory"
        class="border rounded bg-gray-50 flex items-center p-2 mt-2 h-24">
        <div class="flex space-x-2 overflow-x-auto h-full pb-2">
          <!-- History images will be added here dynamically -->
        </div>
      </div>
    </slot>
  </div>
  <PropsContainer />
</div>

<script>
  import { initializeImageGeneratorUI } from "../lib/imageGeneratorUI";
  const apiEndpointWorkflow =
    window.location.pathname == "/lorasuib/inpaint-loras"
      ? "/generation-mask"
      : window.location.pathname == "/lorasuib/face-enhancer"
        ? "/face-enhancer"
        : "image-generator";

  initializeImageGeneratorUI(apiEndpointWorkflow);

  document.addEventListener("DOMContentLoaded", async () => {
    const lorasSelect = document.getElementById(
      "loras-select"
    ) as HTMLSelectElement;

    // Determinar la URL base de la API
    const isLocal =
      window.location.hostname === "localhost" ||
      window.location.hostname === "127.0.0.1";
    const apiUrl = isLocal
      ? "http://localhost:8000/lorasuib/api"
      : "http://ia-ltim.uib.es/lorasuib/api";

    try {
      const response = await fetch(`${apiUrl}/get-loras`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      let loras = await response.json();

      // Define the custom display names and filter out unwanted Lora
      const loraDisplayNames: { [key: string]: string } = {
        "bibiloni1024.safetensors": "Antoni Bibiloni",
        "mascaroPerfeccionadoFlux.safetensors": "Miquel MascarÃ³",
        "oliver1024.safetensors": "Antoni Oliver",
      };
      const loraToExclude = "aidmaImageUprader-FLUX-v0.3.safetensors";

      loras = loras.filter((lora: string) => lora !== loraToExclude);

      loras.forEach((lora: string) => {
        const option = document.createElement("option");
        option.value = lora;
        option.textContent = loraDisplayNames[lora] || lora; // Use custom name if available, otherwise use original
        lorasSelect.appendChild(option);
      });
    } catch (error) {
      console.error("Error fetching Loras:", error);
    }
  });
</script>
