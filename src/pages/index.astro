---
import Layout from '../layouts/Layout.astro';
import DropZone from '../components/DropZone.astro';
import UploadButton from '../components/UploadButton.astro';
---

<Layout title="ComfyUI Image Generator">
  <div class="max-w-3xl mx-auto">
    <!-- Título y tabs ahora están en el layout -->
    <!-- Generated Image Display -->
    <div class="bg-white p-4 rounded-lg shadow-md mb-4">
      <div id="generatedImage" class="w-full h-[560px] border rounded bg-gray-50 flex items-center justify-center relative">
        <p class="text-gray-500">Generated image will appear here</p>
      </div>
    </div>
    <!-- Prompt y botón -->
    <div class="bg-white p-4 rounded-lg shadow-md">
      <h2 class="text-xl font-semibold mb-2">Generation Settings</h2>
      <div class="flex items-center mb-4">
        <span class="mr-2 text-sm font-medium text-gray-700">Basic</span>
        <label class="relative inline-flex items-center cursor-pointer">
          <input type="checkbox" id="toggle-advanced" class="sr-only peer">
          <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-2 peer-focus:ring-indigo-500 rounded-full peer peer-checked:bg-indigo-600 transition-all"></div>
          <div class="absolute left-1 top-1 bg-white w-4 h-4 rounded-full shadow peer-checked:translate-x-5 transition-transform"></div>
        </label>
        <span class="ml-2 text-sm font-medium text-gray-700">Advanced</span>
      </div>
      <div id="settings-basic-advanced" class="space-y-2">
        <div>
          <label class="block text-sm font-medium text-gray-700">Prompt</label>
          <textarea
            id="prompt"
            rows="1"
            class="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
            placeholder="Introduce el prompt"
          ></textarea>
        </div>
        <div id="advanced-fields" style="display:none;">
          <div>
            <label class="block text-sm font-medium text-gray-700">Seed</label>
            <input type="number" id="seed" class="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2" placeholder="Random" min="0" />
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700">CFG</label>
            <input type="range" id="cfg" min="1" max="20" value="7" class="w-full">
            <span id="cfg-value" class="text-sm text-gray-600">7</span>
          </div>
          <div>
            <label class="block text-sm font-medium text-gray-700">Steps</label>
            <input type="range" id="steps" min="1" max="100" value="30" class="w-full">
            <span id="steps-value" class="text-sm text-gray-600">30</span>
          </div>
        </div>
        <button
          id="generate"
          class="w-full bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700"
        >
          Generate Image
        </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { MaskCanvas } from '../lib/canvas';
  import { ImageGenerator } from '../lib/imageGenerator';
  import { appState } from '../lib/appState';

  // Inicializar componentes
  const canvas = new MaskCanvas('dropZone-canvas');
  const imageGenerator = new ImageGenerator();

  // Configurar callback para imágenes intermedias
  imageGenerator.setIntermediateImageCallback((imageUrl) => {
    appState.addIntermediateImage(imageUrl);
  });

  // Event Listeners
  interface ImageLoadedEvent extends CustomEvent {
    detail: string;
  }

  window.addEventListener('image-loaded', ((e: ImageLoadedEvent) => {
    const imageUrl = e.detail;
    canvas.loadImage(imageUrl);
    document.getElementById('clearMask')?.classList.remove('hidden');
    document.getElementById('maskColorSelector')?.classList.remove('hidden');
  }) as EventListener);

  document.getElementById('clearMask')?.addEventListener('click', () => {
    canvas.clearMask();
  });

  // Color selector buttons
  const blackMask = document.getElementById('blackMask');
  const whiteMask = document.getElementById('whiteMask');

  blackMask?.addEventListener('click', () => {
    canvas.setMaskColor('black');
    blackMask.classList.add('ring-2', 'ring-indigo-500');
    whiteMask?.classList.remove('ring-2', 'ring-indigo-500');
  });

  whiteMask?.addEventListener('click', () => {
    canvas.setMaskColor('white');
    whiteMask.classList.add('ring-2', 'ring-indigo-500');
    blackMask?.classList.remove('ring-2', 'ring-indigo-500');
  });

  // Set initial color
  blackMask?.classList.add('ring-2', 'ring-indigo-500');

  document.getElementById('generate')?.addEventListener('click', async () => {
    const prompt = (document.getElementById('prompt') as HTMLTextAreaElement).value;
    
    if (!prompt) {
      alert('Por favor, ingresa un prompt');
      return;
    }

    try {
      appState.startLoading();
      const maskData = canvas.getMaskData();
      const imageUrl = await imageGenerator.generateImage({
        prompt,
        mask: maskData
      });
      
      appState.setGeneratedImage(imageUrl);
    } catch (error) {
      appState.setError('Failed to generate image. Please try again.');
      console.error('Error generating image:', error);
      alert('Failed to generate image. Por favor, intenta de nuevo.');
    }
  });

  // Manejar redimensionamiento
  window.addEventListener('resize', () => {
    canvas.resize();
  });

  // Suscribirse a cambios de estado
  appState.subscribe((state) => {
    const generateButton = document.getElementById('generate') as HTMLButtonElement;
    if (generateButton) {
      generateButton.disabled = state.isLoading;
      generateButton.textContent = state.isLoading ? 'Generando...' : 'Generar Imagen';
    }

    if (state.error) {
      alert(state.error);
    }

    // Actualizar imagen generada e imágenes intermedias
    const generatedImage = document.getElementById('generatedImage');
    if (generatedImage) {
      if (state.isLoading && state.progress) {
        const percent = Math.round((state.progress.value / state.progress.max) * 100);
        generatedImage.innerHTML = `
          <div class="w-full flex flex-col items-center justify-center h-full">
            <div class="w-2/3 bg-gray-200 rounded-full h-6 mb-4 overflow-hidden">
              <div class="bg-indigo-600 h-6 rounded-full transition-all duration-300" style="width: ${percent}%;"></div>
            </div>
            <span class="text-indigo-700 font-semibold">${percent}%</span>
          </div>
        `;
      } else if (state.generatedImageUrl) {
        generatedImage.innerHTML = `
          <img src="${state.generatedImageUrl}" alt="Generated image" class="max-w-full max-h-full" />
        `;
      } else {
        generatedImage.innerHTML = '<p class="text-gray-500">Generated image will appear here</p>';
      }
    }
  });

  // Toggle Basic/Advanced
  const toggle = document.getElementById('toggle-advanced');
  const advancedFields = document.getElementById('advanced-fields');
  if (toggle && advancedFields) {
    toggle.addEventListener('change', (e) => {
      if ((toggle as HTMLInputElement).checked) {
        advancedFields.style.display = '';
      } else {
        advancedFields.style.display = 'none';
      }
    });
  }

  // Mostrar valores de sliders CFG y Steps
  const cfgInput = document.getElementById('cfg') as HTMLInputElement | null;
  const cfgValue = document.getElementById('cfg-value');
  if (cfgInput && cfgValue) {
    cfgInput.addEventListener('input', () => {
      cfgValue.textContent = cfgInput.value;
    });
  }
  const stepsInput = document.getElementById('steps') as HTMLInputElement | null;
  const stepsValue = document.getElementById('steps-value');
  if (stepsInput && stepsValue) {
    stepsInput.addEventListener('input', () => {
      stepsValue.textContent = stepsInput.value;
    });
  }
</script>
