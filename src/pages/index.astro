---
import Layout from '../layouts/Layout.astro';
import DropZone from '../components/DropZone.astro';
import UploadButton from '../components/UploadButton.astro';
---

<Layout title="ComfyUI Image Generator">
  <div class="max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold text-center mb-8">ComfyUI Image Generator</h1>
    
    <!-- Generated Image Display -->
    <div class="mt-8 bg-white p-6 rounded-lg shadow-md mb-8">
      <h2 class="text-xl font-semibold mb-4">Generated Image</h2>
      <div id="generatedImage" class="w-full h-96 border rounded bg-gray-50 flex items-center justify-center relative">
        <p class="text-gray-500">Generated image will appear here</p>
      </div>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
      <!-- Image Upload and Canvas Section -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-semibold mb-4">Carga la imagen y crea la máscara</h2>
        <div class="space-y-4">
          <DropZone id="dropZone">
            <UploadButton id="imageUpload" />
          </DropZone>
          <div class="flex gap-2">
            <button
              id="clearMask"
              class="flex-1 bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600 hidden"
            >
              Limpiar Máscara
            </button>
            <div class="flex items-center gap-2 hidden" id="maskColorSelector">
              <div class="flex gap-2">
                <button
                  id="blackMask"
                  class="w-8 h-8 rounded-full bg-black border-2 border-gray-300 hover:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  title="Máscara negra"
                ></button>
                <button
                  id="whiteMask"
                  class="w-8 h-8 rounded-full bg-white border-2 border-gray-300 hover:border-indigo-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
                  title="Máscara blanca"
                ></button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Generation Settings Section -->
      <div class="bg-white p-6 rounded-lg shadow-md">
        <h2 class="text-xl font-semibold mb-4">Generation Settings</h2>
        <div class="space-y-4">
          
          <div>
            <label class="block text-sm font-medium text-gray-700">Prompt</label>
            <textarea
              id="prompt"
              rows="4"
              class="mt-1 block w-full rounded-md border-2 border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2"
              placeholder="Introduce el prompt"
            ></textarea>
          </div>

          <button
            id="generate"
            class="w-full bg-indigo-600 text-white py-2 px-4 rounded hover:bg-indigo-700"
          >
            Generate Image
          </button>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { MaskCanvas } from '../lib/canvas';
  import { ImageGenerator } from '../lib/imageGenerator';
  import { appState } from '../lib/appState';

  // Inicializar componentes
  const canvas = new MaskCanvas('dropZone-canvas');
  const imageGenerator = new ImageGenerator();

  // Configurar callback para imágenes intermedias
  imageGenerator.setIntermediateImageCallback((imageUrl) => {
    appState.addIntermediateImage(imageUrl);
  });

  // Event Listeners
  interface ImageLoadedEvent extends CustomEvent {
    detail: string;
  }

  window.addEventListener('image-loaded', ((e: ImageLoadedEvent) => {
    const imageUrl = e.detail;
    canvas.loadImage(imageUrl);
    document.getElementById('clearMask')?.classList.remove('hidden');
    document.getElementById('maskColorSelector')?.classList.remove('hidden');
  }) as EventListener);

  document.getElementById('clearMask')?.addEventListener('click', () => {
    canvas.clearMask();
  });

  // Color selector buttons
  const blackMask = document.getElementById('blackMask');
  const whiteMask = document.getElementById('whiteMask');

  blackMask?.addEventListener('click', () => {
    canvas.setMaskColor('black');
    blackMask.classList.add('ring-2', 'ring-indigo-500');
    whiteMask?.classList.remove('ring-2', 'ring-indigo-500');
  });

  whiteMask?.addEventListener('click', () => {
    canvas.setMaskColor('white');
    whiteMask.classList.add('ring-2', 'ring-indigo-500');
    blackMask?.classList.remove('ring-2', 'ring-indigo-500');
  });

  // Set initial color
  blackMask?.classList.add('ring-2', 'ring-indigo-500');

  document.getElementById('generate')?.addEventListener('click', async () => {
    const prompt = (document.getElementById('prompt') as HTMLTextAreaElement).value;
    
    if (!prompt) {
      alert('Por favor, ingresa un prompt');
      return;
    }

    try {
      appState.startLoading();
      const maskData = canvas.getMaskData();
      const imageUrl = await imageGenerator.generateImage({
        prompt,
        mask: maskData
      });
      
      appState.setGeneratedImage(imageUrl);
    } catch (error) {
      appState.setError('Failed to generate image. Please try again.');
      console.error('Error generating image:', error);
      alert('Failed to generate image. Por favor, intenta de nuevo.');
    }
  });

  // Manejar redimensionamiento
  window.addEventListener('resize', () => {
    canvas.resize();
  });

  // Suscribirse a cambios de estado
  appState.subscribe((state) => {
    const generateButton = document.getElementById('generate') as HTMLButtonElement;
    if (generateButton) {
      generateButton.disabled = state.isLoading;
      generateButton.textContent = state.isLoading ? 'Generando...' : 'Generar Imagen';
    }

    if (state.error) {
      alert(state.error);
    }

    // Actualizar imagen generada e imágenes intermedias
    const generatedImage = document.getElementById('generatedImage');
    if (generatedImage) {
      if (state.intermediateImages.length > 0) {
        // Mostrar la última imagen intermedia
        const lastIntermediateImage = state.intermediateImages[state.intermediateImages.length - 1];
        generatedImage.innerHTML = `
          <img src="${lastIntermediateImage}" alt="Intermediate image" class="max-w-full max-h-full" />
          <div class="absolute bottom-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm">
            Step ${state.intermediateImages.length}
          </div>
        `;
      } else if (state.generatedImageUrl) {
        // Mostrar la imagen final
        generatedImage.innerHTML = `
          <img src="${state.generatedImageUrl}" alt="Generated image" class="max-w-full max-h-full" />
          <div class="absolute bottom-4 right-4 bg-black bg-opacity-50 text-white px-3 py-1 rounded-full text-sm">
            Final
          </div>
        `;
      } else {
        generatedImage.innerHTML = '<p class="text-gray-500">Generated image will appear here</p>';
      }
    }
  });
</script>
